source [find mem_helper.tcl]
source [find interface/stlink-v2.cfg]
transport select hla_swd
source [find target/swj-dp.tcl]

   set _CHIPNAME numicro

   set _ENDIAN little

   set _CPUTAPID 0x0bb11477


swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
#swd newdap $_CHIPNAME cpu -irlen 4 -expected-id $_CPUTAPID
adapter_khz 950

adapter_nsrst_delay 100

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -chain-position $_TARGETNAME

set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME numicro 0 0 0 0 $_TARGETNAME

reset_config none
puts "OK"

# The following procedures to erase and unlock a locked MINI51 are taken from
# https://github.com/hackocopter/SWD-Hacking/blob/master/KEIL-Flashtools/Mini51flashtools.ini
# Ported from KEIL to OpenOCD tcl language and added some somments.
# The chip erase sequence got reverse engineered using a Nulink programmer, a logic analyzer
# and custom SWD log parser software.
# Info here:
# https://github.com/hackocopter/SWD-Hacking
# https://www.mikrocontroller.net/topic/309185 (German forum)

# This unlocks access to protected registers
# by writing to REGWRPROT register.
proc InitandUnlock {} {
	puts "in InitandUnlock"
    # Halt target
    mww 0xe000edf0 0x05f0003

    # ?? Something Debug access port / Breakpoint unit
    mww 0xe0002008 0x000000
    mww 0xe000200C 0x000000
    mww 0xe0002010 0x000000
    mww 0xe0002014 0x000000

    # Unlock sequence for protected registers
    mww 0x50000100 0x59
    mww 0x50000100 0x16
    mww 0x50000100 0x88
}

# Read data from flash memory organization address,
# *not* system memory address. See datasheet section 6.7.4
proc ReadViaISP {adr} {
    # Enable ISP
    mww 0x5000c000 0x33
    # ISP-Command = Flash Read
    mww 0x5000c00c 0x00
    mww 0x5000c004 $adr 
    # Write ISP Trigger Control Register (ISPTRG)
    # to start
    mww 0x5000c010 1
          
    # Read ISPTRG until finished
    while {[mrw 0x5000c010] != 0} {
      puts "."
    }

    # Read ISP Data Register (ISPDAT)
    set out [mrw 0x5000c008]

    # Disable ISP
    mww 0x5000c000 0x32
          
    return $out
}

# Write data to flash memory organization address
proc WriteViaISP {adr dat} {
    mww 0x5000c000 0x33
    # ISP-Command = Flash Program
    mww 0x5000c00c 0x21
    mww 0x5000c004 $adr  
    mww 0x5000c008 $dat  
          
    mww 0x5000c010 1
          
    # Read ISPTRG until finished
    while {[mrw 0x5000c010] != 0} {
      puts "."
    }

    if { [expr {[mrw 0x5000c000] & 0x40}] } {
      puts "ISP Error"
      return
    }

    mww 0x5000c000 0x32
}

proc PageErase {adr} {
    mww 0x5000c000 0x33
    # ISP-Command = Flash page erase
    mww 0x5000c00c 0x22
    mww 0x5000c004 $adr  
          
    mww 0x5000c010 1
          
    # Read ISPTRG until finished
    while {[mrw 0x5000c010] != 0} {
      puts "."
    }

    if { [expr {[mrw 0x5000c000] & 0x40}] } {
      puts "ISP Error"
      return
    }

    mww 0x5000c000 0x32
}

# Set boot configuration (like AVR fuse bits)
proc WriteStdConfig {} {
    InitandUnlock
    # Boot from APROM, no IAP, Flash Unlocked, data flash enabled, no BOD
    # All unused bits set to 1
    # Works for "DE" and "AN" parts
    set conf0 0xFFFFFFFE
    # Data flash start address
    set conf1 0x3E00

    # If writing to the config registers fails on a "DE series" part
    # (e.g. Mini54ZDE) uncomment this:
    # Write one to undocumented flash control register
    # to enable write access to flash
    mww 0x5000c01c 0x01
    PageErase 0x300000
    WriteViaISP 0x300000 $conf0
    WriteViaISP 0x300004 $conf1
    puts "Standard config written"
}

proc ReadConfigRegs {} {
    puts "Reading Configuration registers."
    InitandUnlock
    puts "Unlock done"
    set conf0 [ReadViaISP 0x300000]
    set conf1 [ReadViaISP 0x300004]
    set id    [mrw 0x50000000]
    puts [format "Config0 (0x00300000):0x%X" $conf0]
    puts [format "Config1 (0x00300004):0x%X" $conf1]
    puts [format "Device ID           :0x%X" $id]  
}

# Perform undocumented erase and unlock sequence
# if flash is locked (Config0 register bit1 cleared)
proc ChipErase {} {
	puts "in ChipErase"
    InitandUnlock


    set conf0 [ReadViaISP 0x300000]
    
    if { [expr {$conf0 & 2} ]} {
      puts "Flash is not locked! Doing nothing."
      return
    }
    puts "Flash is locked."

    # Enable ISP
    mww 0x5000c000 0x33
    # Write one to undocumented flash control register
    mww 0x5000c01c 0x01
      
    if { [expr {[mrw 0x5000c000] & 0x40}] } {
      puts "ISP Error"
      return
    }
    
    if { [expr {[mrw 0x5000c010] }]!= 0} {
      puts "ISP Busy error"
      return
    }

    # Undocumented ISP-Command Chip-Erase
    mww 0x5000c00c 0x26
    mww 0x5000c004 0  
    puts "Performing chip erase."
    mww 0x5000c010 1  
      
    while {[mrw 0x5000c010] != 0} {
      puts "."
    }

    if { [expr {[mrw 0x5000c000] & 0x40}] } {
      puts "ISP Error\n"
      return
    }

    # Disable ISP
    mww 0x5000c000 0x32

    puts "APROM:"
    if {[ReadViaISP 0x00000000] == 0xffffffff } {
      puts "Erased!"
    } else {
      puts "Error!"
    }

    puts "LDROM:"
    if {[ReadViaISP 0x00100000] == 0xffffffff } {
      puts "Erased!"
    } else {
      puts "Error!"
    }

    puts "Config:"
    if {[ReadViaISP 0x0030000] == 0xffffffff } {
      puts "Erased!"
    } else {
      puts "Error!"
    }

    # Write zero to undocumented register
    mww 0x5000c01c 0
}
